orbs:
  aws-cli: circleci/aws-cli@2.0.0
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:15.6.0
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &zip-project
    run:
      name: Zip Project
      command: |
        zip chatapp.zip -r .
        echo "Zip successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Infrastructure Folder
          command: |
            cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  # linting:
  #   executor: app-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - *restore-cache
  #     - *save-cache
  #     - run:
  #         name: Run linting
  #         command: npm run lint

  # prettier:
  #   executor: app-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - *restore-cache
  #     - run:
  #         name: Run prettier check
  #         command: npm run prettier:check

  # terraform-validate:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Validate & Format
  #         command: |
  #           cd artifacts/infrastructure/
  #           terraform init -backend=false
  #           terraform validate
  #           terraform fmt -check

  # terraform-plan-and-apply:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Plan
  #         command: |
  #           cd artifacts/infrastructure/
  #           terraform init
  #           terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
  #           terraform plan
  #     - run:
  #         name: Terraform Apply
  #         command: |
  #           cd artifacts/infrastructure/
  #           terraform workspace select ${CIRCLE_BRANCH}
  #           terraform apply --auto-approve
  #           terraform output configuration_endpoint_address > ../configuration_endpoint_address.txt
  #           terraform output backend_server_s3_bucket > ../backend_server_s3_bucket.txt
  #           terraform output server_code_deploy > ../server_code_deploy.txt
  #           terraform output codedeploy_deployment_group > ../codedeploy_deployment_group.txt
  #     - persist_to_workspace:
  #         root: ./
  #         paths:
  #           - artifacts

  # upload-env-to-s3:
  #   executor: aws-cli/default
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./
  #     - aws-cli/setup:
  #         profile-name: default
  #     - run:
  #         name: Upload ENV to S3
  #         command: |
  #           if [ "${UPDATE_ENV_FILE}" == "true" ]
  #           then
  #             aws s3 sync s3://chatapp-env-files/${CIRCLE_BRANCH} .
  #             unzip env-file.zip
  #             cp .env.production .env
  #             ELASTICACHE_ENDPOINT=$(cat configuration_endpoint_address.txt | sed 's/\"//g')
  #             echo $ELASTICACHE_ENDPOINT
  #             sed -i -e "s|\(^REDIS_HOST=\).*|REDIS_HOST=\"$ELASTICACHE_ENDPOINT\"|g" .env
  #             rm env-file.zip
  #             zip env-file.zip .env
  #             aws --region eu-central-1 s3 cp env-file.zip s3://chatapp-env-files/${CIRCLE_BRANCH}/
  #           fi

  upload-zipped-project-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Upload Project to S3
          command: |
            echo chat-server-${CIRCLE_BRANCH}-app
            aws --region eu-central-1 s3 cp chatapp.zip s3://chat-server-${CIRCLE_BRANCH}-app

  # terraform-destroy:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Destroy
  #         command: |
  #           cd infrastructure/
  #           terraform init
  #           terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
  #           terraform destroy --auto-approve


workflows:
  build_and_deploy:
    jobs:
      - build
      - upload-zipped-project-to-s3:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      # - prettier:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - terraform-validate:
      #     requires:
      #       - prettier
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - terraform-plan-and-apply:
      #     requires:
      #       - terraform-validate
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - hold:
      #     type: approval
      #     requires:
      #       - terraform-plan-and-apply
      # - terraform-destroy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
