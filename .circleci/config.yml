orbs:
  aws-cli: circleci/aws-cli@2.0.0
  coveralls: coveralls/coveralls@1.0.6 # Don't forget to go into organization's security and select yes
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:15.6.0
      - image: circleci/redis:latest
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &zip-project
    run:
      name: Zip Project
      command: |
        rm -rf node_modules
        zip chatapp.zip -r .
        echo "Zip successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - persist_to_workspace:
          root: .
          paths:
            - .

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - setup_remote_docker # required to run docker commands
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Start Redis Server
          command: docker run --name chatapp-redis -p 6379:6379 --detach redis
          background: true
      - run:
          name: Start Server
          command: |
            sleep 3
            npm run dev
          background: true
      - run:
          name: Run Unit Test
          command: |
            sleep 3
            npm run test
      - coveralls/upload:
          path_to_lcov: ./coverage/lcov/lcov.info

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate & Format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd infrastructure/
            terraform init -var-file="infrastructure.tfvars"
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan -var-file="infrastructure.tfvars"
      - run:
          name: Terraform Apply
          command: |
            cd infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply -var-file="infrastructure.tfvars" --auto-approve
            terraform output configuration_endpoint_address > ../configuration_endpoint_address.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  upload-env-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Upload ENV to S3
          command: |
            if [ "${UPDATE_ENV_FILE}" == "true" ]
            then
              aws s3 sync s3://chatapp-env-files/${CIRCLE_BRANCH} .
              unzip env-file.zip
              cp .env.production .env
              ELASTICACHE_ENDPOINT=$(cat configuration_endpoint_address.txt | sed 's/\"//g')
              echo $ELASTICACHE_ENDPOINT
              sed -i -e "s|\(^REDIS_HOST=\).*|REDIS_HOST=\"$ELASTICACHE_ENDPOINT\"|g" .env
              rm env-file.zip
              cp .env .env.production
              zip env-file.zip .env.production
              aws --region eu-central-1 s3 cp env-file.zip s3://chatapp-env-files/${CIRCLE_BRANCH}/
            fi

  # Don't attach workspace here otherwise
  # you won't be able to delete the node_modules
  upload-zipped-project-to-s3:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Upload Project to S3
          command: |
            aws --region eu-central-1 s3 cp chatapp.zip s3://chat-server-${CIRCLE_BRANCH}-app

  push-to-aws-code-deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - *zip-project
      - run:
          name: Deploy Changes With AWS CodeDeploy
          command: |
            if [ "${CODE_DEPLOY_UPDATE}" == "true" ]
            then
              aws deploy create-deployment \
                --region eu-central-1 \
                --application-name chat-server-${CIRCLE_BRANCH}-app \
                --deployment-config-name CodeDeployDefault.AllAtOnce \
                --deployment-group-name chat-server-${CIRCLE_BRANCH}-group \
                --s3-location bucket=chat-server-${CIRCLE_BRANCH}-app,bundleType=zip,key=chatapp.zip
            fi

  # In a real production environment, you would not want to have this
  # job
  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy -var-file="infrastructure.tfvars" --auto-approve


workflows:
  build_and_deploy:
    jobs:
      - build
      - unit-test:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master # Be sure to check if the branch is master or main
      # - terraform-plan-and-apply:
      #     requires:
      #       - terraform-validate
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - upload-env-to-s3:
      #     requires:
      #       - terraform-plan-and-apply
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - upload-zipped-project-to-s3:
      #     requires:
      #       - upload-env-to-s3
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - push-to-aws-code-deploy:
      #     requires:
      #       - upload-zipped-project-to-s3
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
      # - hold:
      #     type: approval
      #     requires:
      #       - push-to-aws-code-deploy
      # - terraform-destroy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
